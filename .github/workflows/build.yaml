name: Build Docker Container

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:
    types: [opened, synchronize, reopened]

env:
  DOCKER_IMAGE: scartalune/docker-gc-cron

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker:
    needs: sonarcloud
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from Dockerfile
        id: get_version
        run: |
          VERSION=$(grep 'LABEL version=' Dockerfile | cut -d '"' -f 2)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ env.VERSION }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      #- name: Run Trivy vulnerability scanner
        #uses: aquasecurity/trivy-action@master
        #with:
          #image-ref: '${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}'
          #format: 'table'
          #exit-code: '1'
          #ignore-unfixed: true
          #vuln-type: 'os,library'
          #severity: 'CRITICAL,HIGH'
